<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cryptography | peramid.es]]></title>
  <link href="https://blog.peramid.es/blog/categories/cryptography/atom.xml" rel="self"/>
  <link href="https://blog.peramid.es/"/>
  <updated>2014-09-11T21:07:10-04:00</updated>
  <id>https://blog.peramid.es/</id>
  <author>
    <name><![CDATA[Brian Gomes Bascoy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Short introduction to SJCL]]></title>
    <link href="https://blog.peramid.es/blog/2014/09/09/short-introduction-to-sjcl/"/>
    <updated>2014-09-09T20:01:50-04:00</updated>
    <id>https://blog.peramid.es/blog/2014/09/09/short-introduction-to-sjcl</id>
    <content type="html"><![CDATA[<p>The Stanford Javascript Crypto Library, or simply <a href="https://github.com/bitwiseshiftleft/sjcl/">SJCL</a>, is probably the best option available right now for using cryptography on the client-side: the project started in 2009 as a <a href="https://bitwiseshiftleft.github.io/sjcl/acsac.pdf">paper</a> describing how to implement a secure and fast crypto library for web browsers, including, for instance, a CSPRNG algorithm and symmetric encryption. Today, it also has public-key crypto, hashing, and ECC primitives. It&rsquo;s very small (just 37kb uncompressed w/ ECC), the code is pretty clean, and it&rsquo;s being maintained by various contributors on GitHub. One of the biggest problems right now is the auto-generated <a href="https://bitwiseshiftleft.github.io/sjcl/doc/">documentation</a>, which isn&rsquo;t super helpful, but that&rsquo;s not a big deal since you can always read the sources.</p>

<p>Let&rsquo;s start with a very simple example using the convenience functions to easily encrypt and decrypt data (using AES):</p>

<pre><code class="javascript">var msg = sjcl.encrypt("secret", "Hi Alice!");
console.log(sjcl.decrypt("secret", msg));
</code></pre>

<p>That was pretty simple. Let&rsquo;s try something different, like hashing a string using SHA-256:</p>

<pre><code class="javascript">var hash = sjcl.hash.sha256.hash("hello world");
console.log("hash: "+sjcl.codec.hex.fromBits(hash));
// It should print: "hash: b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
</code></pre>

<p>SJCL has many ADTs. In this case <code>myhash</code> is an array of 8 numbers (in js this is 64 bits floats) but it&rsquo;s actually holding binary data (using just 32 bits for each number), so SJCL provides functions to convert, for example, from a binary array to a string in hexadecimal format.</p>

<p>For the next example, I would like to use some elliptic curve cryptography, but to do that we need to build SJCL first to enable this option:</p>

<pre><code class="shell-session">$ git clone https://github.com/bitwiseshiftleft/sjcl.git sjcl
$ cd sjcl
$ ./configure --with-ecc
$ make
</code></pre>

<p>Now with our custom <code>sjcl.js</code> we can use the ECC primitives like DSA. So let&rsquo;s sign the previous hash:</p>

<pre><code class="javascript">// Generate a key pair and use it to sign the SHA-256 hash
var curve = sjcl.ecc.curves.k256;
var keys = sjcl.ecc.ecdsa.generateKeys(curve,6);
var signature = keys.sec.sign(hash,0);

// Extract the coordinates of the public point and create a public key object for testing
var pubkey_x = new curve.field(sjcl.bn.fromBits(keys.pub.get().x));
var pubkey_y = new curve.field(sjcl.bn.fromBits(keys.pub.get().y));
var point = new sjcl.ecc.point(curve, pubkey_x, pubkey_y);
var newpubkey = new sjcl.ecc.ecdsa.publicKey(curve, point);

// Print the signature and verify it
console.log("sign: "+sjcl.codec.base64.fromBits(signature));
console.log("verified: "+newpubkey.verify(hash, signature));
</code></pre>

<p>Obviously we didn&rsquo;t need to create a new public key object to verify the signature, but I wanted to show how to obtain the public point. Finally, here is how we can serialize the public key (a point in the curve) and the private key (the exponent):</p>

<pre><code class="javascript">var pubkey_hex = sjcl.codec.hex.fromBits(keys.pub.get().x) + sjcl.codec.hex.fromBits(keys.pub.get().y);
var seckey_hex = sjcl.codec.hex.fromBits(keys.sec.get());

// Unserialize and create a public key object (SJCL will divide the binary array in two parts and get each coordinate)
var public_key = new sjcl.ecc.ecdsa.publicKey(curve, sjcl.codec.hex.toBits(pubkey_hex));

// Unserialize and create a private key object (we have to create a bignum object)
var secret_key_bn = new sjcl.bn(seckey_hex);
var secret_key = new sjcl.ecc.ecdsa.secretKey(curve, secret_key_bn);
</code></pre>

<p>There is a branch that already includes functions for serialization, so this method will be deprecated in the future.</p>
]]></content>
  </entry>
  
</feed>
